selectInput(
inputId = "classe_x",
label = "Eixo x",
choices = c("Average players", "Peak Players"),
selected = NULL,
),
selectInput(
inputId = "classe_y",
label = "Eixo y",
choices = c("Average players", "Peak Players"),
selected = NULL,
),
dateInput(
inputId="start_date",
label="Selecione a data inicial",
value = NULL,
min = "mm-yyyy",
max = "mm-yyyy",
format = "mm-yyyy",
startview = "year",
weekstart = 0,
language = "pt-br",
width = NULL,
autoclose = TRUE,
datesdisabled = NULL,
daysofweekdisabled = NULL
),
dateInput(
inputId="end_date",
label="Selecione a data final",
value = NULL,
min = NULL,
max = NULL,
format = "mm-yyyy",
startview = "year",
weekstart = 0,
language = "pt-br",
width = NULL,
autoclose = TRUE,
datesdisabled = NULL,
daysofweekdisabled = NULL
),
),
mainPanel(
navbarPage(NULL,
tabPanel("Tabela",
tableOutput('table_02')),
tabPanel("Gráfico em linha",
box()),
tabPanel("Gráfico em barra das médias",
box()),
tabPanel("Scatterplot",
box())
)
)
))
)
)
)
server <- function(input, output) {
######################## ABA 01 ##################################
# Crie uma função reativa para mapear a opção selecionada no selectInput para o nome da coluna correspondente
selected_column <- reactive({
switch(input$classe,
"Average players" = "Avg_players",
"Peak Players" = "Peak_Players"
)
})
############################ Tabela aba 01 #######################
#calcula moda
calculate_mode <- function(x) {
unique_x <- unique(x)
counts <- table(x)
return(unique_x[which.max(counts)])
}
# Crie um resumo com base na coluna selecionada
valve_summary <- reactive({
col_name <- selected_column()
summary_data <- valve %>%
group_by(Game_Name) %>%
summarise(
moda = calculate_mode(get(col_name)),
média = mean(get(col_name)),
mediana = median(get(col_name)),
desvio_padrão = sd(get(col_name)),
valor_mínimo = min(get(col_name)),
valor_máximo = max(get(col_name))
)
return(summary_data)
})
# Renderize a tabela com base nos dados resumidos
output$table_01 <- renderTable(valve_summary())
######################## ABA 02 ##################################
selected_column_x <- reactive({
switch(input$classe_x,
"Average players" = "Avg_players",
"Peak Players" = "Peak_Players"
)
})
selected_column_y <- reactive({
switch(input$classe_y,
"Average players" = "Avg_players",
"Peak Players" = "Peak_Players"
)
})
############################ Tabela aba 02 #######################
# Crie um resumo com base na coluna selecionada
correlacao_por_jogo <- reactive({
valve %>%
group_by(Game_Name) %>%
summarise(
Correlacao = cor(.data[[selected_column_x()]], .data[[selected_column_y()]])
)
})
# Renderize a tabela de correlação por jogo
output$table_02 <- renderTable({
correlacao_por_jogo()
})
}
shinyApp(ui, server)
#install.packages("shinydashboard")
## app.R ##
library(shiny)
library(shinydashboard)
library(ggplot2)
library(dplyr)
# Carregue seus dados
valve <- read.csv("Valve_Player_Data.csv")
ui <- dashboardPage(
dashboardHeader(title = "Dashboard"),
dashboardSidebar(
sidebarMenu(
menuItem("Analise individual", tabName = "analise-individual", icon = icon("chart-simple")),
menuItem("Comparar", tabName = "comparar", icon = icon("code-compare"))
)
),
dashboardBody(
tabItems(
tabItem(tabName = "analise-individual",
sidebarLayout(
sidebarPanel(
# Seleciona a variável para o eixo y
selectInput(
inputId = "classe",
label = "Escolha uma classe",
choices = c("Average players", "Peak Players"),
selected = NULL,
),
dateInput(
inputId="start_date_1",
label="Selecione a data inicial",
value = NULL,
min = "mm-yyyy",
max = "mm-yyyy",
format = "mm-yyyy",
startview = "year",
weekstart = 0,
language = "pt-br",
width = NULL,
autoclose = TRUE,
datesdisabled = NULL,
daysofweekdisabled = NULL
),
dateInput(
inputId="end_date_1",
label="Selecione a data final",
value = NULL,
min = NULL,
max = NULL,
format = "mm-yyyy",
startview = "year",
weekstart = 0,
language = "pt-br",
width = NULL,
autoclose = TRUE,
datesdisabled = NULL,
daysofweekdisabled = NULL
),
),
mainPanel(
navbarPage(NULL,
tabPanel("Tabela",
tableOutput('table_01')),
tabPanel("Gráfico em linha",
box()),
tabPanel("Histograma",
box()),
tabPanel("Boxplot",
box())
)
)
)
),
tabItem(tabName = "comparar",
sidebarLayout(
sidebarPanel(
selectInput(
inputId = "classe_x",
label = "Eixo x",
choices = c("Average players", "Peak Players"),
selected = NULL,
),
selectInput(
inputId = "classe_y",
label = "Eixo y",
choices = c("Average players", "Peak Players"),
selected = NULL,
),
dateInput(
inputId="start_date",
label="Selecione a data inicial",
value = NULL,
min = "mm-yyyy",
max = "mm-yyyy",
format = "mm-yyyy",
startview = "year",
weekstart = 0,
language = "pt-br",
width = NULL,
autoclose = TRUE,
datesdisabled = NULL,
daysofweekdisabled = NULL
),
dateInput(
inputId="end_date",
label="Selecione a data final",
value = NULL,
min = NULL,
max = NULL,
format = "mm-yyyy",
startview = "year",
weekstart = 0,
language = "pt-br",
width = NULL,
autoclose = TRUE,
datesdisabled = NULL,
daysofweekdisabled = NULL
),
),
mainPanel(
navbarPage(NULL,
tabPanel("Tabela",
tableOutput('table_02')),
tabPanel("Gráfico em linha",
box()),
tabPanel("Gráfico em barra das médias",
box()),
tabPanel("Scatterplot",
box())
)
)
))
)
)
)
server <- function(input, output) {
######################## ABA 01 ##################################
# Crie uma função reativa para mapear a opção selecionada no selectInput para o nome da coluna correspondente
selected_column <- reactive({
switch(input$classe,
"Average players" = "Avg_players",
"Peak Players" = "Peak_Players"
)
})
############################ Tabela aba 01 #######################
#calcula moda
calculate_mode <- function(x) {
unique_x <- unique(x)
counts <- table(x)
return(unique_x[which.max(counts)])
}
# Crie um resumo com base na coluna selecionada
valve_summary <- reactive({
col_name <- selected_column()
summary_data <- valve %>%
group_by(Game_Name) %>%
summarise(
moda = calculate_mode(get(col_name)),
média = mean(get(col_name)),
mediana = median(get(col_name)),
desvio_padrão = sd(get(col_name)),
valor_mínimo = min(get(col_name)),
valor_máximo = max(get(col_name))
)
return(summary_data)
})
# Renderize a tabela com base nos dados resumidos
output$table_01 <- renderTable(valve_summary())
######################## ABA 02 ##################################
selected_column_x <- reactive({
switch(input$classe_x,
"Average players" = "Avg_players",
"Peak Players" = "Peak_Players"
)
})
selected_column_y <- reactive({
switch(input$classe_y,
"Average players" = "Avg_players",
"Peak Players" = "Peak_Players"
)
})
############################ Tabela aba 02 #######################
# Crie um resumo com base na coluna selecionada
correlacao_por_jogo <- reactive({
valve %>%
group_by(Game_Name) %>%
summarise(
Correlacao = cor(.data[[selected_column_x()]], .data[[selected_column_y()]], method = "spearman")
)
})
# Renderize a tabela de correlação por jogo
output$table_02 <- renderTable({
correlacao_por_jogo()
})
}
shinyApp(ui, server)
#install.packages("shinydashboard")
## app.R ##
library(shiny)
library(shinydashboard)
library(ggplot2)
library(dplyr)
# Carregue seus dados
valve <- read.csv("Valve_Player_Data.csv")
ui <- dashboardPage(
dashboardHeader(title = "Dashboard"),
dashboardSidebar(
sidebarMenu(
menuItem("Analise individual", tabName = "analise-individual", icon = icon("chart-simple")),
menuItem("Comparar", tabName = "comparar", icon = icon("code-compare"))
)
),
dashboardBody(
tabItems(
tabItem(tabName = "analise-individual",
sidebarLayout(
sidebarPanel(
# Seleciona a variável para o eixo y
selectInput(
inputId = "classe",
label = "Escolha uma classe",
choices = c("Average players", "Peak Players"),
selected = NULL,
),
dateInput(
inputId="start_date_1",
label="Selecione a data inicial",
value = NULL,
min = "mm-yyyy",
max = "mm-yyyy",
format = "mm-yyyy",
startview = "year",
weekstart = 0,
language = "pt-br",
width = NULL,
autoclose = TRUE,
datesdisabled = NULL,
daysofweekdisabled = NULL
),
dateInput(
inputId="end_date_1",
label="Selecione a data final",
value = NULL,
min = NULL,
max = NULL,
format = "mm-yyyy",
startview = "year",
weekstart = 0,
language = "pt-br",
width = NULL,
autoclose = TRUE,
datesdisabled = NULL,
daysofweekdisabled = NULL
),
),
mainPanel(
navbarPage(NULL,
tabPanel("Tabela",
tableOutput('table_01')),
tabPanel("Gráfico em linha",
box()),
tabPanel("Histograma",
box()),
tabPanel("Boxplot",
box())
)
)
)
),
tabItem(tabName = "comparar",
sidebarLayout(
sidebarPanel(
selectInput(
inputId = "classe_x",
label = "Eixo x",
choices = c("Average players", "Peak Players"),
selected = NULL,
),
selectInput(
inputId = "classe_y",
label = "Eixo y",
choices = c("Average players", "Peak Players"),
selected = NULL,
),
dateInput(
inputId="start_date",
label="Selecione a data inicial",
value = NULL,
min = "mm-yyyy",
max = "mm-yyyy",
format = "mm-yyyy",
startview = "year",
weekstart = 0,
language = "pt-br",
width = NULL,
autoclose = TRUE,
datesdisabled = NULL,
daysofweekdisabled = NULL
),
dateInput(
inputId="end_date",
label="Selecione a data final",
value = NULL,
min = NULL,
max = NULL,
format = "mm-yyyy",
startview = "year",
weekstart = 0,
language = "pt-br",
width = NULL,
autoclose = TRUE,
datesdisabled = NULL,
daysofweekdisabled = NULL
),
),
mainPanel(
navbarPage(NULL,
tabPanel("Tabela",
tableOutput('table_02')),
tabPanel("Gráfico em linha",
box()),
tabPanel("Gráfico em barra das médias",
box()),
tabPanel("Scatterplot",
box())
)
)
))
)
)
)
server <- function(input, output) {
######################## ABA 01 ##################################
# Crie uma função reativa para mapear a opção selecionada no selectInput para o nome da coluna correspondente
selected_column <- reactive({
switch(input$classe,
"Average players" = "Avg_players",
"Peak Players" = "Peak_Players"
)
})
############################ Tabela aba 01 #######################
#calcula moda
calculate_mode <- function(x) {
unique_x <- unique(x)
counts <- table(x)
return(unique_x[which.max(counts)])
}
# Crie um resumo com base na coluna selecionada
valve_summary <- reactive({
col_name <- selected_column()
summary_data <- valve %>%
group_by(Game_Name) %>%
summarise(
moda = calculate_mode(get(col_name)),
média = mean(get(col_name)),
mediana = median(get(col_name)),
desvio_padrão = sd(get(col_name)),
valor_mínimo = min(get(col_name)),
valor_máximo = max(get(col_name))
)
return(summary_data)
})
# Renderize a tabela com base nos dados resumidos
output$table_01 <- renderTable(valve_summary())
######################## ABA 02 ##################################
selected_column_x <- reactive({
switch(input$classe_x,
"Average players" = "Avg_players",
"Peak Players" = "Peak_Players"
)
})
selected_column_y <- reactive({
switch(input$classe_y,
"Average players" = "Avg_players",
"Peak Players" = "Peak_Players"
)
})
############################ Tabela aba 02 #######################
# Crie um resumo com base na coluna selecionada
correlacao_por_jogo <- reactive({
valve %>%
group_by(Game_Name) %>%
summarise(
Correlacao = cor(.data[[selected_column_x()]], .data[[selected_column_y()]], method = "spearman")
)
})
# Renderize a tabela de correlação por jogo
output$table_02 <- renderTable({
correlacao_por_jogo()
})
}
shinyApp(ui, server)
